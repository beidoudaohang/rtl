//-------------------------------------------------------------------------------------------------
//  -- 版权所有者   : 中国大恒（集团）有限公司北京图像视觉技术分公司, 2010 -2015.
//  -- 保密级别     ：绝密.
//  -- 部门         : 硬件部，FPGA工作组
//  -- 模块名       : map_python
//  -- 设计者       : 邢海涛
//-------------------------------------------------------------------------------------------------
//
//  -- 版本记录 :
//
//  -- 作者         :| 修改日期				:|  修改说明
//-------------------------------------------------------------------------------------------------
//  -- 邢海涛       :| 2015/10/14 9:55:41	:|  初始版本
//-------------------------------------------------------------------------------------------------
//
//  -- 模块描述     : 将数据排列为python输出的形式
//              1)  : AN66427-D 写明了python数据输出的排列方式
//
//						--even kernel--			--odd kernel--
//				ch0		p0			p1			p7			p6
//
//				ch1		p2			p3			p5			p4
//
//				ch2		p4			p5			p3			p2
//
//				ch3		p6			p7			p1			p0
//
//              2)  : ... ...
//
//              3)  : ... ...
//
//-------------------------------------------------------------------------------------------------
//仿真单位/精度
`timescale 1ns/1ps
//-------------------------------------------------------------------------------------------------

module map_python # (
	parameter			DATA_WIDTH			= 8		,	//数据位宽
	parameter			CHANNEL_NUM			= 4			//通道数
	)
	(
	input										clk							,	//时钟
	input										i_fval						,	//场有效
	input										i_lval						,	//行有效
	input	[DATA_WIDTH*CHANNEL_NUM-1:0]		iv_pix_data					,	//像素数据
	output										o_fval						,	//场有效
	output										o_lval						,	//行有效
	output	[DATA_WIDTH*CHANNEL_NUM-1:0]		ov_pix_data						//像素数据
	);


	//	ref signals

	reg		[1:0]								pix_cnt	= 2'b0;
	reg		[1:0]								pix_cnt_dly0	= 2'b0;
	reg		[1:0]								pix_cnt_dly1	= 2'b0;
	reg		[1:0]								pix_cnt_dly2	= 2'b0;
	wire	[DATA_WIDTH-1:0]					wv_data_lane	[CHANNEL_NUM-1:0]	;
	reg		[DATA_WIDTH-1:0]					map_temp0	[CHANNEL_NUM-1:0];
	reg		[DATA_WIDTH-1:0]					map_temp1	[CHANNEL_NUM-1:0];
	wire	[DATA_WIDTH*CHANNEL_NUM-1:0]		map_temp_align0	;
	wire	[DATA_WIDTH*CHANNEL_NUM-1:0]		map_temp_align1	;
	reg		[DATA_WIDTH*CHANNEL_NUM-1:0]		map_latch0	;
	reg		[DATA_WIDTH*CHANNEL_NUM-1:0]		map_latch1	;
	reg		[DATA_WIDTH*CHANNEL_NUM-1:0]		dout_reg	= 'b0;
	reg		[3:0]								fval_shift	= 4'b0;
	reg		[3:0]								lval_shift	= 4'b0;



	//	ref ARCHITECTURE
	//	===============================================================================================
	//	ref ***重新排列***
	//	===============================================================================================
	//	-------------------------------------------------------------------------------------
	//	像素计数器
	//	--8个像素组成1个kernel，2个kernel组成一个循环
	//	-------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if(i_fval&i_lval) begin
			pix_cnt	<= pix_cnt + 1'b1;
		end
		else begin
			pix_cnt	<= 4'b0;
		end
	end


	always @ (posedge clk) begin
		pix_cnt_dly0	<= pix_cnt;
		pix_cnt_dly1	<= pix_cnt_dly0;
		pix_cnt_dly2	<= pix_cnt_dly1;
	end
	//	-------------------------------------------------------------------------------------
	//	划分通道
	//	--每个通道的位宽是 DATA_WIDTH 个bit
	//	--大端，最高的通道在低byte。小端，最低的通道在低byte。
	//	-------------------------------------------------------------------------------------
	genvar	i;
	generate
		for(i=0;i<CHANNEL_NUM;i=i+1) begin
			assign	wv_data_lane[i]	= iv_pix_data[DATA_WIDTH*(i+1)-1:DATA_WIDTH*i];
		end
	endgenerate

	//-------------------------------------------------------------------------------------------------
	//						***input***
	//-------------------------------------------------------------------------------------------------
	//
	//				ch0		p0			p4			p0			p4
	//
	//				ch1		p1			p5			p1			p5
	//
	//				ch2		p2			p6			p2			p6
	//
	//				ch3		p3			p7			p3			p7
	//
	//-------------------------------------------------------------------------------------------------
	//						***output***
	//-------------------------------------------------------------------------------------------------
	//						--even kernel--			--odd kernel--
	//				ch0		p0			p1			p7			p6
	//
	//				ch1		p2			p3			p5			p4
	//
	//				ch2		p4			p5			p3			p2
	//
	//				ch3		p6			p7			p1			p0
	//
	//-------------------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if(i_fval&i_lval) begin
			case(pix_cnt)
				0	: begin
					map_temp0[0]		<= wv_data_lane[0];
					map_temp1[0]		<= wv_data_lane[1];
					map_temp0[1]		<= wv_data_lane[2];
					map_temp1[1]		<= wv_data_lane[3];
				end
				1	: begin
					map_temp0[2]		<= wv_data_lane[0];
					map_temp1[2]		<= wv_data_lane[1];
					map_temp0[3]		<= wv_data_lane[2];
					map_temp1[3]		<= wv_data_lane[3];
				end
				2	: begin
					map_temp1[3]		<= wv_data_lane[0];
					map_temp0[3]		<= wv_data_lane[1];
					map_temp1[2]		<= wv_data_lane[2];
					map_temp0[2]		<= wv_data_lane[3];
				end
				3	: begin
					map_temp1[1]		<= wv_data_lane[0];
					map_temp0[1]		<= wv_data_lane[1];
					map_temp1[0]		<= wv_data_lane[2];
					map_temp0[0]		<= wv_data_lane[3];
				end
			endcase
		end
	end

	//	-------------------------------------------------------------------------------------
	//         		  ___  ___  ___  ___  ___  ___  ___  ___  ___  ___  ___  ___  ___  ___  ___  ___  ___  ___  ___  ___  ___  ___
	//	clk  		__| |__| |__| |__| |__| |__| |__| |__| |__| |__| |__| |__| |__| |__| |__| |__| |__| |__| |__| |__| |__| |__| |__
	//
	//					   ________________________________________________________________________________________________
	//	i_fval		_______|                                                                                              |_________
	//                     _________________________________________              _________________________________________
	//	i_lval		_______|                                       |______________|                                       |_________
	//
	//	pix_cnt		-------< 0 >< 1 >< 2 >< 3 >< 0 >< 1 >< 2 >< 3 >< 0            >< 0 >< 1 >< 2 >< 3 >< 0 >< 1 >< 2 >< 3 >
	//
	//	din			-------<d0 ><d1 ><d2 ><d3 ><d4 ><d5 ><d6 ><d7 >----------------<d0 ><d1 ><d2 ><d3 ><d4 ><d5 ><d6 ><d7 >----------------
	//
	//	map_temp0	-----------------<d01><xxx><d23><xxx><d45><xxx><d67><xxx>----------------<d01><xxx><d23><xxx><d45><xxx><d67><xxx>----------------
	//
	//	map_temp1	-----------------<d01><xxx><d23><xxx><d45><xxx><d67><xxx>----------------<d01><xxx><d23><xxx><d45><xxx><d67><xxx>----------------
	//
	//	map_latch0	----------------------<d01     ><d23     ><d45     ><d67     >----------------<d01     ><d23     ><d45     ><d67     >----------------
	//
	//	map_latch1	----------------------<d01     ><d23     ><d45     ><d67     >----------------<d01     ><d23     ><d45     ><d67     >----------------
	//
	//	pix_cnt_dly2----------------------< 0 >< 1 >< 2 >< 3 >< 0 >< 1 >< 2 >< 3 >< 0            >< 0 >< 1 >< 2 >< 3 >< 0 >< 1 >< 2 >< 3 >
	//
	//	dout		---------------------------<d0 ><d1 ><d2 ><d3 ><d4 ><d5 ><d6 ><d7 >----------------<d0 ><d1 ><d2 ><d3 ><d4 ><d5 ><d6 ><d7 >----------------
	//
	//					                       ________________________________________________________________________________________________
	//	o_fval		___________________________|                                                                                              |_________
	//                                         _________________________________________              _________________________________________
	//	o_lval		___________________________|                                       |______________|                                       |_________
	//
	//
	//	-------------------------------------------------------------------------------------


	//	===============================================================================================
	//	ref ***输出***
	//	===============================================================================================
	//	-------------------------------------------------------------------------------------
	//	整合通道
	//	--每个通道的位宽是 DATA_WIDTH 个bit
	//	--大端，最高的通道在低byte。小端，最低的通道在低byte。
	//	-------------------------------------------------------------------------------------
	genvar	j;
	generate
		for(j=0;j<CHANNEL_NUM;j=j+1) begin
			assign	map_temp_align0[DATA_WIDTH*(j+1)-1:DATA_WIDTH*j]	= map_temp0[j];
			assign	map_temp_align1[DATA_WIDTH*(j+1)-1:DATA_WIDTH*j]	= map_temp1[j];
		end
	endgenerate

	//	-------------------------------------------------------------------------------------
	//	当 pix_cnt[0]==0 时，锁存排列的数据
	//	-------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if(!pix_cnt[0]) begin
			map_latch0	<= map_temp_align0;
			map_latch1	<= map_temp_align1;
		end
	end

	//	-------------------------------------------------------------------------------------
	//	选择输出的数据
	//	-------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if(pix_cnt_dly2[0]) begin
			dout_reg	<= map_latch0;
		end
		else begin
			dout_reg	<= map_latch1;
		end
	end
	assign	ov_pix_data	= dout_reg;

	//	-------------------------------------------------------------------------------------
	//	数据延时2拍，使能也要延时2拍
	//	-------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		fval_shift	<= {fval_shift[2:0],i_fval};
	end
	assign	o_fval	= fval_shift[3];

	always @ (posedge clk) begin
		lval_shift	<= {lval_shift[2:0],i_lval};
	end
	assign	o_lval	= lval_shift[3];

endmodule
