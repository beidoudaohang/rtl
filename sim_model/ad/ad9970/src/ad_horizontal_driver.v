//-------------------------------------------------------------------------------------------------
//  -- 版权所有者   : 中国大恒（集团）有限公司北京图像视觉技术分公司, 2010 -2015.
//  -- 保密级别     ：绝密.
//  -- 部门         : 硬件部，FPGA工作组
//  -- 模块名       : ad_horizontal_driver
//  -- 设计者       : 邢海涛
//-------------------------------------------------------------------------------------------------
//
//  -- 版本记录 :
//
//  -- 作者         :| 修改日期				:|  修改说明
//-------------------------------------------------------------------------------------------------
//  -- 邢海涛       :| 2015/8/9 15:48:45	:|  初始版本
//-------------------------------------------------------------------------------------------------
//
//  -- 模块描述     :
//              1)  : ... ...
//
//              2)  : ... ...
//
//              3)  : ... ...
//
//-------------------------------------------------------------------------------------------------
//仿真单位/精度
`timescale 1ns/1ps
//-------------------------------------------------------------------------------------------------

module ad_horizontal_driver (
	input			clk				,	//8倍串行时钟
	input			reset			,	//串行时钟复位
	input			i_hl_mask_pol	,	//hblk有效时，hl的电平
	input			i_h1_mask_pol	,	//hblk有效时，h1的电平
	input			i_h2_mask_pol	,	//hblk有效时，h2的电平
	input			i_hblk_n		,	//hblk信号，低有效
	output			o_hl			,	//hl
	output			o_h1			,	//h1
	output			o_h2			,	//h2
	output			o_rg				//rg
	);

	//	ref signals
	reg		[2:0]		ser_cnt		= 3'b0;
	reg					hl_reg		= 1'b0;
	reg					h1_reg		= 1'b0;
	reg					h2_reg		= 1'b0;

	//	ref ARCHITECTURE

	//	-------------------------------------------------------------------------------------
	//	串行化计数器
	//	1.每个通道的串化率是8bit，因此计数器是3bit，从0到7累加
	//	-------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if(reset) begin
			ser_cnt	<= 3'b0;
		end
		else begin
			ser_cnt	<= ser_cnt + 1'b1;
		end
	end

	//	-------------------------------------------------------------------------------------
	//	hl
	//	-------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if(i_hblk_n==1'b0) begin
			hl_reg	<= i_hl_mask_pol;
		end
		else begin
			if(ser_cnt==3'd1) begin
				hl_reg	<= 1'b0;
			end
			else if(ser_cnt==3'd5) begin
				hl_reg	<= 1'b1;
			end
		end
	end
	assign	o_hl	= hl_reg;
	assign	o_rg	= !hl_reg;
	
	//	-------------------------------------------------------------------------------------
	//	h1
	//	-------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if(i_hblk_n==1'b0) begin
			h1_reg	<= i_h1_mask_pol;
		end
		else begin
			if(ser_cnt==3'd1) begin
				h1_reg	<= 1'b0;
			end
			else if(ser_cnt==3'd5) begin
				h1_reg	<= 1'b1;
			end
		end
	end
	assign	o_h1	= h1_reg;

	//	-------------------------------------------------------------------------------------
	//	h2
	//	-------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if(i_hblk_n==1'b0) begin
			h2_reg	<= i_h2_mask_pol;
		end
		else begin
			if(ser_cnt==3'd1) begin
				h2_reg	<= 1'b0;
			end
			else if(ser_cnt==3'd5) begin
				h2_reg	<= 1'b1;
			end
		end
	end
	assign	o_h2	= h2_reg;

endmodule
