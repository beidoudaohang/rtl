//-------------------------------------------------------------------------------------------------
//  -- 版权所有者   : 中国大恒（集团）有限公司北京图像视觉技术分公司, 2010 -2015.
//  -- 保密级别     ：绝密.
//  -- 部门         : 硬件部，FPGA工作组
//  -- 模块名       : judge
//  -- 设计者       : 邢海涛
//-------------------------------------------------------------------------------------------------
//
//  -- 版本记录 :
//
//  -- 作者         :| 修改日期				:|  修改说明
//-------------------------------------------------------------------------------------------------
//  -- 邢海涛       :| 2013/6/3 16:18:47	:|  初始版本
//-------------------------------------------------------------------------------------------------
//
//  -- 模块描述     :	读写模块仲裁逻辑
//              1)  : 为了避免读写模块同时进入工作状态，写了这个模块
//
//              2)  : 具体时序参见帧缓存模块详细说明文档
//
//              3)  : ack信号有效状态为1clk高电平
//
//-------------------------------------------------------------------------------------------------
//`include			"judge_def.v"
//仿真单位/精度
`timescale 1ns/1ps
//-------------------------------------------------------------------------------------------------

module judge (
	input				clk			,
	input				i_wr_req	,//写请求信号，高有效
	input				i_rd_req	,//读请求信号，高有效
	output				o_wr_ack	,//写允许信号，高有效
	output				o_rd_ack	//读允许信号，高有效
	);

	//ref signals
	reg					wr_ack_reg = 1'b0;
	reg					rd_ack_reg = 1'b0;

	//ref ARCHITECTURE

	//  -------------------------------------------------------------------------------------
	//  读写请求仲裁
	//	读写允许信号宽度是1 clk。
	//	发出请求的模块必须在收到允许信号的下个周期将请求信号拉低
	//  -------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if((i_wr_req == 1'b1)&&(wr_ack_reg == 1'b0)) begin				//写请求来了，且还没有响应过写请求
			wr_ack_reg	<= 1'b1;
		end
		else begin
			wr_ack_reg	<= 1'b0;
		end
	end

	always @ (posedge clk) begin
		if((i_rd_req == 1'b1)&&(rd_ack_reg == 1'b0)) begin				//有读请求来了，且还没有响应过读请求
			if(i_wr_req == 1'b1) begin									//现在有写请求
				if(wr_ack_reg == 1'b1) begin							//已经响应了写允许，那么可以输出读允许
					rd_ack_reg	<= 1'b1;
				end
				else begin											//还没有响应写允许，不能输出读允许
					rd_ack_reg	<= 1'b0;
				end
			end
			else begin												//此时没有写请求，可以输出读允许
				rd_ack_reg	<= 1'b1;
			end
		end
		else begin													//没有读请求，清零读允许信号
			rd_ack_reg	<= 1'b0;
		end
	end

	assign	o_wr_ack	= wr_ack_reg;
	assign	o_rd_ack	= rd_ack_reg;



endmodule
