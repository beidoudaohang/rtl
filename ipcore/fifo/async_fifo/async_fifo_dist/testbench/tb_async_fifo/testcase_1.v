//-------------------------------------------------------------------------------------------------
//  -- 版权所有者   : 中国大恒（集团）有限公司北京图像视觉技术分公司, 2010 -2015.
//  -- 保密级别     ：绝密.
//  -- 部门         : 硬件部，FPGA工作组
//  -- 模块名       : testcase_1
//  -- 设计者       : 邢海涛
//-------------------------------------------------------------------------------------------------
//
//  -- 版本记录 :
//
//  -- 作者         :| 修改日期				:|  修改说明
//-------------------------------------------------------------------------------------------------
//  -- 邢海涛       :| 2015/4/10 16:50:28	:|  初始版本
//-------------------------------------------------------------------------------------------------
//
//  -- 模块描述     : 窗口大小是16x16，开采信号有效，正常模式下的运行状况
//              1)  : ... ...
//
//              2)  : ... ...
//
//              3)  : ... ...
//
//-------------------------------------------------------------------------------------------------
//仿真单位/精度
`timescale 1ns/1ps
//-------------------------------------------------------------------------------------------------

module testcase_1 ();

	//	ref signals
	//	===============================================================================================
	//	--ref parameter
	//	===============================================================================================
	//	-------------------------------------------------------------------------------------
	//	TESTCASE
	//	-------------------------------------------------------------------------------------
	parameter	TESTCASE_NUM			= "testcase_1"			;	//其他模块需要使用字符串
	//	-------------------------------------------------------------------------------------
	//	dut paramter
	//	-------------------------------------------------------------------------------------
	parameter	FIFO_WIDTH		= 8		;
	parameter	FIFO_DEPTH		= 16	;

	//	-------------------------------------------------------------------------------------
	//	monitor paramter
	//	-------------------------------------------------------------------------------------
	parameter	MONITOR_OUTPUT_FILE_EN			= 0						;	//是否产生输出文件
	parameter	MONITOR_OUTPUT_FILE_PATH		= "file/sync_buffer_file/"	;	//产生的数据要写入的路径
	parameter	CHK_INOUT_DATA_STOP_ON_ERROR	= 0						;
	parameter	CHK_PULSE_WIDTH_STOP_ON_ERROR	= 0						;

	//	-------------------------------------------------------------------------------------
	//	testcase parameter
	//	-------------------------------------------------------------------------------------
	parameter	CLK_PERIOD_WR				= 15	;	//时钟频率
	parameter	CLK_PERIOD_RD				= 23	;	//时钟频率

	//	===============================================================================================
	//	--ref signal
	//	===============================================================================================
	//	-------------------------------------------------------------------------------------
	//	dut signal
	//	-------------------------------------------------------------------------------------
	reg								reset_async		= 1'b0	;
	reg								clk_wr			= 1'b0	;
	reg								i_wr_en			= 1'b0	;
	reg		[FIFO_WIDTH-1:0]		iv_fifo_din		= 'b0	;
	reg								clk_rd			= 1'b0	;
	//	wire							i_rd_en			;
	reg								i_rd_en			= 1'b0	;

	//	-------------------------------------------------------------------------------------
	//	testbench
	//	-------------------------------------------------------------------------------------
	reg								rd_begin		= 1'b0;

	//	ref ARCHITECTURE

	//	===============================================================================================
	//	ref ***tb 子模块激励***
	//	===============================================================================================
	//	-------------------------------------------------------------------------------------
	//	--ref DUT
	//	-------------------------------------------------------------------------------------
	//	-------------------------------------------------------------------------------------
	//	时钟复位
	//	-------------------------------------------------------------------------------------
	always	#(CLK_PERIOD_WR/2.0)	clk_wr	= !clk_wr;
	always	#(CLK_PERIOD_RD/2.0)	clk_rd	= !clk_rd;

	initial begin
		reset_async	= 1'b1;
		#200;
		reset_async	= 1'b0;
	end

	//	-------------------------------------------------------------------------------------
	//	写
	//	-------------------------------------------------------------------------------------
	//	always @ (posedge clk_wr) begin
	//		i_wr_en	<= $random();
	//	end

	initial begin
		wait(harness.o_fifo_full==1'b0);
		repeat(100) @ (posedge clk_wr);
		i_wr_en		<= 1'b1;
		repeat(1) @ (posedge clk_wr);
		i_wr_en		<= 1'b0;

		forever begin
			@(posedge i_rd_en);
			repeat(20) @ (posedge clk_wr);
			i_wr_en		<= 1'b1;
			repeat(1) @ (posedge clk_wr);
			i_wr_en		<= 1'b0;
		end
	end

	always @ (posedge clk_wr) begin
		if((i_wr_en==1)&&(harness.o_fifo_full==1'b0)) begin
			iv_fifo_din	<= iv_fifo_din + 1'b1;
		end
	end

	//	-------------------------------------------------------------------------------------
	//	读
	//	-------------------------------------------------------------------------------------
	//	initial begin
	//		rd_begin	= 1'b0;
	//		wait(harness.o_fifo_full==1'b1 && harness.full==1'b1);
	//		#5000
	//		rd_begin	= 1'b1;
	//	end
	//	assign	i_rd_en	= rd_begin ? !harness.o_fifo_empty : 1'b0;


	initial begin
		wait(harness.o_fifo_empty==1'b0);
		repeat(100) @ (posedge clk_rd);
		i_rd_en		<= 1'b1;
		repeat(1) @ (posedge clk_rd);
		i_rd_en		<= 1'b0;

		forever begin
			@(posedge i_wr_en);
			repeat(20) @ (posedge clk_rd);
			i_rd_en		<= 1'b1;
			repeat(1) @ (posedge clk_rd);
			i_rd_en		<= 1'b0;
		end
	end

	//	-------------------------------------------------------------------------------------
	//	--ref 仿真时间
	//	-------------------------------------------------------------------------------------
	initial begin
		#200
		#10000
		#200
		$stop;
	end


endmodule
