//-------------------------------------------------------------------------------------------------
//  -- 版权所有者   : 中国大恒（集团）有限公司北京图像视觉技术分公司, 2010 -2015.
//  -- 保密级别     ：绝密.
//  -- 部门         : 硬件部，FPGA工作组
//  -- 模块名       : wb_bayer_sel
//  -- 设计者       : 邢海涛
//-------------------------------------------------------------------------------------------------
//
//  -- 版本记录 :
//
//  -- 作者         :| 修改日期				:|  修改说明
//-------------------------------------------------------------------------------------------------
//  -- 邢海涛       :| 2015/2/13 10:22:58	:|  初始版本
//-------------------------------------------------------------------------------------------------
//
//  -- 模块描述     : 根据Sensor的bayer格式，拆分出 R G B 三个颜色分量
//              1)  : ... ...
//
//              2)  : ... ...
//
//              3)  : ... ...
//
//-------------------------------------------------------------------------------------------------
//仿真单位/精度
`timescale 1ns/1ps
//-------------------------------------------------------------------------------------------------

module wb_bayer_sel # (
	parameter	BAYER_PATTERN		= "GR"	,	//"GR" "RG" "GB" "BG"
	parameter	SENSOR_DAT_WIDTH	= 10		//sensor 数据宽度
	)
	(
	input								clk			,	//像素时钟
	input								i_fval		,	//场有效
	input								i_lval		,	//数据有效
	input	[SENSOR_DAT_WIDTH-1:0]		iv_pix_data	,	//图像数据
	output								o_r_flag	,	//R 标志
	output								o_g_flag	,	//G 标志
	output								o_b_flag	,	//B 标志
	output								o_fval		,	//场有效
	output								o_lval		,	//行有效
	output	[SENSOR_DAT_WIDTH-1:0]		ov_pix_data		//图像数据
	);

	//	ref signals
	reg									lval_dly		= 1'b0;
	wire								lval_fall		;
	reg									fval_dly		= 1'b0;
	reg		[SENSOR_DAT_WIDTH-1:0]		pix_data_dly	= {SENSOR_DAT_WIDTH{1'b0}};
	reg									line_cnt		= 1'b0;
	reg									r_flag			= 1'b0;
	reg									g_flag			= 1'b0;
	reg									b_flag			= 1'b0;

	//	ref ARCHITECTURE

	//  ===============================================================================================
	//	ref ***延时 取边沿***
	//  ===============================================================================================
	//  -------------------------------------------------------------------------------------
	//	行有效取边沿
	//  -------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		lval_dly	<= i_lval;
	end
	assign	lval_fall	= (lval_dly==1'b1 && i_lval==1'b0) ? 1'b1 : 1'b0;

	//  -------------------------------------------------------------------------------------
	//	延时 fval
	//  -------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		fval_dly	<= i_fval;
	end

	//  -------------------------------------------------------------------------------------
	//	延时 pix data
	//  -------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		pix_data_dly	<= iv_pix_data;
	end

	//  ===============================================================================================
	//	ref ***提取颜色分量***
	//  ===============================================================================================
	//  -------------------------------------------------------------------------------------
	//	行计数器，奇数行和偶数行的bayer格式不一样
	//  -------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if(!i_fval) begin
			line_cnt	<= 1'b0;
		end
		else begin
			if(lval_fall) begin
				line_cnt	<= !line_cnt;
			end
		end
	end

	//  -------------------------------------------------------------------------------------
	//	pattern 差分颜色分量
	//  -------------------------------------------------------------------------------------
	generate
		//  -------------------------------------------------------------------------------------
		//	ref 1 GR pattern
		//	line 0		GRGRGRGR
		//		r flag	01010101
		//		g flag	10101010
		//		b flag	00000000
		//	line 1		BGBGBGBG
		//		r flag	00000000
		//		g flag	01010101
		//		b flag	10101010
		//  -------------------------------------------------------------------------------------
		if(BAYER_PATTERN=="GR") begin
			always @ (posedge clk) begin
				if(!i_lval) begin
					r_flag	<= 1'b0;
					g_flag	<= 1'b0;
					b_flag	<= 1'b0;
				end
				else begin
					if(!line_cnt) begin
						r_flag	<= g_flag;
						g_flag	<= !g_flag;
						b_flag	<= 1'b0;
					end
					else begin
						r_flag	<= 1'b0;
						g_flag	<= b_flag;
						b_flag	<= !b_flag;
					end
				end
			end
		end
		//  -------------------------------------------------------------------------------------
		//	ref 2 RG pattern
		//	line 0		RGRGRGRG
		//		r flag	10101010
		//		g flag	01010101
		//		b flag	00000000
		//	line 1		GBGBGBGB
		//		r flag	00000000
		//		g flag	10101010
		//		b flag	01010101
		//  -------------------------------------------------------------------------------------
		else if(BAYER_PATTERN=="RG") begin
			always @ (posedge clk) begin
				if(!i_lval) begin
					r_flag	<= 1'b0;
					g_flag	<= 1'b0;
					b_flag	<= 1'b0;
				end
				else begin
					if(!line_cnt) begin
						r_flag	<= !r_flag;
						g_flag	<= r_flag;
						b_flag	<= 1'b0;
					end
					else begin
						r_flag	<= 1'b0;
						g_flag	<= !g_flag;
						b_flag	<= g_flag;
					end
				end
			end
		end
		//  -------------------------------------------------------------------------------------
		//	ref 3 GB pattern
		//	line 0		GBGBGBGB
		//		r flag	00000000
		//		g flag	10101010
		//		b flag	01010101
		//	line 1		RGRGRGRG
		//		r flag	10101010
		//		g flag	01010101
		//		b flag	00000000
		//  -------------------------------------------------------------------------------------
		else if(BAYER_PATTERN=="GB") begin
			always @ (posedge clk) begin
				if(!i_lval) begin
					r_flag	<= 1'b0;
					g_flag	<= 1'b0;
					b_flag	<= 1'b0;
				end
				else begin
					if(!line_cnt) begin
						r_flag	<= 1'b0;
						g_flag	<= !g_flag;
						b_flag	<= g_flag;
					end
					else begin
						r_flag	<= !r_flag;
						g_flag	<= r_flag;
						b_flag	<= 1'b0;
					end
				end
			end
		end
		//  -------------------------------------------------------------------------------------
		//	ref 4 BG pattern
		//	line 0		BGBGBGBG
		//		r flag	00000000
		//		g flag	01010101
		//		b flag	10101010
		//	line 1		GRGRGRGR
		//		r flag	01010101
		//		g flag	10101010
		//		b flag	00000000
		//  -------------------------------------------------------------------------------------
		else if(BAYER_PATTERN=="BG") begin
			always @ (posedge clk) begin
				if(!i_lval) begin
					r_flag	<= 1'b0;
					g_flag	<= 1'b0;
					b_flag	<= 1'b0;
				end
				else begin
					if(!line_cnt) begin
						r_flag	<= 1'b0;
						g_flag	<= b_flag;
						b_flag	<= !b_flag;
					end
					else begin
						r_flag	<= g_flag;
						g_flag	<= !g_flag;
						b_flag	<= 1'b0;
					end
				end
			end
		end
		//  -------------------------------------------------------------------------------------
		//	输入其他的参数，错误
		//  -------------------------------------------------------------------------------------
		else begin
			always @ (posedge clk) begin
				r_flag	<= 1'b0;
				g_flag	<= 1'b0;
				b_flag	<= 1'b0;
			end
		end

	endgenerate

	//  -------------------------------------------------------------------------------------
	//	输出颜色分量标志
	//  -------------------------------------------------------------------------------------
	assign	o_r_flag	= r_flag;
	assign	o_g_flag	= g_flag;
	assign	o_b_flag	= b_flag;

	//  ===============================================================================================
	//	ref ***输出像素数据***
	//  ===============================================================================================
	assign	o_fval		= 	fval_dly;
	assign	o_lval		= 	lval_dly;
	assign	ov_pix_data	= 	pix_data_dly;










endmodule
