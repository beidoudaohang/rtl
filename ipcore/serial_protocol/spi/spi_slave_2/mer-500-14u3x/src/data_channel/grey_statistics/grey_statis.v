//-------------------------------------------------------------------------------------------------
//  -- 版权所有者   : 中国大恒（集团）有限公司北京图像视觉技术分公司, 2010 -2015.
//  -- 保密级别     ：绝密.
//  -- 部门         : 硬件部，FPGA工作组
//  -- 模块名       : grey_statis
//  -- 设计者       : 邢海涛
//-------------------------------------------------------------------------------------------------
//
//  -- 版本记录 :
//
//  -- 作者         :| 修改日期				:|  修改说明
//-------------------------------------------------------------------------------------------------
//  -- 邢海涛       :| 2015/3/18 15:16:24	:|  初始版本
//-------------------------------------------------------------------------------------------------
//
//  -- 模块描述     : 灰度统计模块
//              1)  : 根据 aoi 行场信号，累加每个像素
//
//              2)  : o_fval延时1个时钟
//
//              3)  : 像素格式8bit-统计低8bit；其他-全部统计
//
//-------------------------------------------------------------------------------------------------
//仿真单位/精度
`timescale 1ns/1ps
//-------------------------------------------------------------------------------------------------

module grey_statis # (
	parameter						SENSOR_DAT_WIDTH	= 10	,	//sensor 数据宽度
	parameter						GREY_STATIS_WIDTH	= 48	,	//灰度统计模块统计值宽度
	parameter						REG_WD				= 32		//寄存器位宽
	)
	(
	//Sensor输入信号
	input								clk						,	//像素时钟
	input								i_fval					,	//场信号
	input								i_lval					,	//行信号
	input	[SENSOR_DAT_WIDTH-1:0]		iv_pix_data				,	//图像数据
	//其他模块输入
	input								i_interrupt_pin			,	//中断模块输出的中断信号，1-中断有效。在中断上升沿时，锁存灰度统计值和窗口寄存器到端口
	//灰度统计相关寄存器
	input	[REG_WD-1:0]				iv_pixel_format			,	//像素格式寄存器0x01080001:Mono8、0x01100003:Mono10、0x01080008:BayerGR8、0x0110000C:BayerGR10
	output	[GREY_STATIS_WIDTH-1:0]		ov_grey_statis_sum			//该寄存器值为图像灰度统计值总和。如果像素格式为8bit，该值为像素8bit统计值。如果像素格式为10bit，该值为像素10bit统计值
	);

	//	ref signals

	reg									fval_dly0		= 1'b0;
	reg									fval_dly1		= 1'b0;
	wire								fval_rise		;
	reg									int_pin_dly		= 1'b0;
	wire								int_pin_rise	;
//	reg									format8_sel		= 1'b0;
	reg		[GREY_STATIS_WIDTH-1:0]		grey_statis		= {GREY_STATIS_WIDTH{1'b0}};
	reg		[GREY_STATIS_WIDTH-1:0]		grey_statis_reg	= {GREY_STATIS_WIDTH{1'b0}};



	//	ref ARCHITECTURE


	//  ===============================================================================================
	//	ref ***延时 取边沿***
	//  ===============================================================================================
	//  -------------------------------------------------------------------------------------
	//	场有效取边沿
	//  -------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		fval_dly0	<= i_fval;
	end
	assign	fval_rise	= (fval_dly0==1'b0 && i_fval==1'b1) ? 1'b1 : 1'b0;

	//  -------------------------------------------------------------------------------------
	//	中断取边沿
	//  -------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		int_pin_dly	<= i_interrupt_pin;
	end
	assign	int_pin_rise	= (int_pin_dly==1'b0 && i_interrupt_pin==1'b1) ? 1'b1 : 1'b0;

	//  ===============================================================================================
	//	ref ***统计像素***
	//  ===============================================================================================
	//	//  -------------------------------------------------------------------------------------
	//	//	Mono8		- 0x01080001	-> 0x1081	-> 0001,0000,1000,,,,0001
	//	//	Mono10		- 0x01100003	-> 0x1103	-> 0001,0001,0000,,,,0011
	//	//	BayerGR8	- 0x01080008	-> 0x1088	-> 0001,0000,1000,,,,1000
	//	//	BayerGR10	- 0x0110000C	-> 0x110C	-> 0001,0001,0000,,,,1100
	//	//											   --------!-!-------!!!!
	//	//                                                     ^    ^       ^------bit0
	//	//                                             bit20---|    |---bit16
	//	//	标记上 ! 的，就是参与比较的bit.分别是 bit
	//	//  -------------------------------------------------------------------------------------
	//	//  -------------------------------------------------------------------------------------
	//	//	format8_sel
	//	//	1.判断像素格式是否选中8bit像素格式
	//	//	2.使用6bit判断依据
	//	//  -------------------------------------------------------------------------------------
	//	always @ (posedge clk) begin
	//		case({iv_pixel_format[20],iv_pixel_format[19],iv_pixel_format[3:0]})
	//			6'b010001	: format8_sel	<= 1'b1;
	//			6'b011000	: format8_sel	<= 1'b1;
	//			default		: format8_sel	<= 1'b0;
	//		endcase
	//	end

	//	//  -------------------------------------------------------------------------------------
	//	//	灰度统计值
	//	//	1.当场上升沿时，复位内部计数器
	//	//	2.lval有效时，加上输入的像素数据
	//	//	3.像素格式是8bit时，统计高8bit。像素格式是10bit，统计10bit。
	//	//  -------------------------------------------------------------------------------------
	//	always @ (posedge clk) begin
	//		if(fval_rise) begin
	//			grey_statis	<= {GREY_STATIS_WIDTH{1'b0}};
	//		end
	//		else begin
	//			if(i_lval) begin
	//				if(format8_sel) begin
	//					grey_statis	<= grey_statis + iv_pix_data[SENSOR_DAT_WIDTH-1:SENSOR_DAT_WIDTH-8];
	//				end
	//				else begin
	//					grey_statis	<= grey_statis + iv_pix_data[SENSOR_DAT_WIDTH-1:0];
	//				end
	//
	//			end
	//		end
	//	end

	//  -------------------------------------------------------------------------------------
	//	灰度统计值
	//	1.当场上升沿时，复位内部计数器
	//	2.lval有效时，加上输入的像素数据
	//	3.像素格式是8bit时，统计8bit。像素格式是10bit，统计高8bit。
	//  -------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if(fval_rise) begin
			grey_statis	<= {GREY_STATIS_WIDTH{1'b0}};
		end
		else begin
			if(i_lval) begin
				grey_statis	<= grey_statis + iv_pix_data[SENSOR_DAT_WIDTH-1:SENSOR_DAT_WIDTH-8];
			end
		end
	end

	//  ===============================================================================================
	//	ref ***输出统计结果***
	//  ===============================================================================================
	//  -------------------------------------------------------------------------------------
	//	在中断信号的上升沿，将内部统计结果锁存到端口上
	//  -------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if(int_pin_rise) begin
			grey_statis_reg	<= grey_statis;
		end
	end
	assign	ov_grey_statis_sum	= grey_statis_reg;


endmodule
