//-------------------------------------------------------------------------------------------------
//  -- 版权所有者   : 中国大恒（集团）有限公司北京图像视觉技术分公司, 2010 -2015.
//  -- 保密级别     ：绝密.
//  -- 部门         : 硬件部，FPGA工作组
//  -- 模块名       : leader
//  -- 设计者       : 张强
//-------------------------------------------------------------------------------------------------
//
//  -- 版本记录 :
//
//  -- 作者         :| 修改日期				:|  修改说明
//-------------------------------------------------------------------------------------------------
//  -- 张强         :| 2014/12/3 13:58:33	:|  根据技术预研整理
//-------------------------------------------------------------------------------------------------
//
//  -- 模块描述
//              1)  : U3V格式leader模块，组合成符合U3V格式leader包
//
//-------------------------------------------------------------------------------------------------
//仿真单位/精度
`timescale 1ns/1ps
//-------------------------------------------------------------------------------------------------
module leader #(
	parameter							DATA_WD			= 32	,	//输入输出数据位宽，这里使用同一宽度
	parameter							SHORT_REG_WD	= 16	,	//短寄存器位宽
	parameter							REG_WD 			= 32	,	//寄存器位宽
	parameter							LONG_REG_WD 	= 64		//长寄存器位宽
	)
	(
//  ===============================================================================================
//  第一部分：时钟复位
//  ===============================================================================================
	input								reset					,		//复位信号，高电平有效，像素时钟时钟域
	input								clk						,		//时钟信号，像素时钟时钟域，同内部像素时钟
//  ===============================================================================================
//  第二部分：头包标志
//  ===============================================================================================
	input								i_leader_flag			,		//头包标志
//  ===============================================================================================
//  第三部分：控制寄存器、chunk信息和只读寄存器
//  ===============================================================================================
	input		[REG_WD-1			:0]	iv_pixel_format         ,       //像素格式，用于添加在leader中
	input								i_chunk_mode_active     ,       //chunk总开关，开关打开Payload Type使用为image extend chunk 类型，chunk关闭为image类型
	input		[LONG_REG_WD-1		:0]	iv_blockid				,		//头包、chunk、尾包的blockid信息，第一帧的block ID从0开始计数，第一帧block ID为0
	input		[LONG_REG_WD-1		:0]	iv_timestamp			, 		//头包中的时间戳字段,iv_timestamp在场信号上升沿8个时钟之后才能稳定
	input		[SHORT_REG_WD-1		:0]	iv_size_x				, 		//头包中的窗口宽度
	input		[SHORT_REG_WD-1		:0]	iv_size_y				, 		//头包中的窗口高度
	input		[SHORT_REG_WD-1		:0]	iv_offset_x				, 		//头包中的水平偏移
	input		[SHORT_REG_WD-1		:0]	iv_offset_y				, 		//头包中的垂直便宜

//  ===============================================================================================
//  第四部分：数据有效、数据
//  ===============================================================================================
	output	reg							o_data_valid			,       //添加完头的数据有效信号
	output	reg	[DATA_WD-1			:0]	ov_data                         //头包数据
	);
//  ===============================================================================================
//  本地参数
//  ===============================================================================================
	localparam							LEADER_LENTH	=	4'd13	;		//头包长度13
//  ===============================================================================================
//  线网和寄存器定义
//  ===============================================================================================
	reg			[3					:0]	count          = 	4'h0;		//计数器，用来添加头包中的信号
//  ===============================================================================================
//  i_leader_flag内计数
//  ===============================================================================================
	always @ (posedge clk) begin
		if(i_leader_flag) begin
			count	<=	count + 4'h1;
		end
		else begin
			count	<=	4'h0;
		end
	end
//  -------------------------------------------------------------------------------------
//  构造leader包内容，包格式符合Image Extended Chunk Leader格式
//  -------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if ( reset ) begin
			ov_data <= 	32'h0;
		end
		else  begin
			case ( count )
				4'h1	:	ov_data	<=	32'h4c563355				;
				4'h2	:   ov_data	<=	{16'd52,16'd0}				;
				4'h3	:   ov_data	<=	iv_blockid[31:0]          	;
				4'h4	:   ov_data	<=	iv_blockid[63:32]         	;
				4'h5	:   ov_data	<=	{1'b0,i_chunk_mode_active,{14'h0001},16'h0000}	;	//这里只支持Image（0x0001）和Image Extended Chunk（0x4001）
				4'h6	:   ov_data	<=	iv_timestamp[31:0]			;
				4'h7	:   ov_data	<=	iv_timestamp[63:32]			;
				4'h8	:   ov_data	<=	iv_pixel_format				;
				4'h9	:   ov_data	<=	{16'h00,iv_size_x}			;
				4'ha	:   ov_data	<=	{16'h00,iv_size_y}			;
				4'hb	:   ov_data	<=	{16'h00,iv_offset_x}		;
				4'hc	:   ov_data	<=	{16'h00,iv_offset_y}		;
				4'hd	:   ov_data	<=	32'h0						;
				default	:  	ov_data <= 	32'h0						;
			endcase
		end
	end
//  -------------------------------------------------------------------------------------
//  输出o_data_valid信号
//  -------------------------------------------------------------------------------------
	always @ (posedge clk ) begin
		if ( reset ) begin
			o_data_valid	<=	1'b0;
		end
		else if (( count>4'h0 ) && ( count <= LEADER_LENTH ))begin
			o_data_valid	<=	1'b1;
		end
		else begin
			o_data_valid	<=	1'b0;
		end
	end

endmodule