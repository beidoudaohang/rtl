//-------------------------------------------------------------------------------------------------
//  -- 版权所有者   : 中国大恒（集团）有限公司北京图像视觉技术分公司, 2010 -2015.
//  -- 保密级别     ：绝密.
//  -- 部门         : 硬件部，FPGA工作组
//  -- 模块名       : trailer
//  -- 设计者       : 张强
//-------------------------------------------------------------------------------------------------
//
//  -- 版本记录 :
//
//  -- 作者         :| 修改日期				:|  修改说明
//-------------------------------------------------------------------------------------------------
//  -- 张强         :| 2014/12/3 16:50:10	:|  根据技术预研整理
//-------------------------------------------------------------------------------------------------
//
//  -- 模块描述
//              1)  : U3V格式trailer模块，组合成符合U3V格式trailer包
//
//-------------------------------------------------------------------------------------------------
//仿真单位/精度
`timescale 1ns/1ps
//-------------------------------------------------------------------------------------------------

module trailer # (
	parameter				DATA_WD						= 32	,	//输入输出数据位宽，这里使用同一宽度
	parameter				SHORT_REG_WD 				= 16	,	//短寄存器位宽
	parameter				REG_WD 						= 32	,	//寄存器位宽
	parameter				LONG_REG_WD 				= 64		//长寄存器位宽
	)
	(
//  ===============================================================================================
//  第一部分：时钟复位
//  ===============================================================================================
	input							reset						,	//复位信号，高电平有效，像素时钟时钟域
	input							clk							,	//时钟信号，像素时钟时钟域，同内部像素时钟
//  ===============================================================================================
//  第二部分：尾包标志
//  ===============================================================================================
	input							i_trailer_flag				,	//头包标志
//  ===============================================================================================
//  第三部分：控制寄存器、chunk信息和只读寄存器
//  ===============================================================================================
	input							i_chunk_mode_active			,	//chunk总开关，开关打开Payload Type使用为image extend chunk 类型，chunk关闭为image类型
	input							i_chunkid_en_ts	    		,	//时间戳chunk使能
    input							i_chunkid_en_fid	        ,   //frame id chunk使能
	input		[LONG_REG_WD-1  :0]	iv_blockid					,	//头包、chunk、尾包的blockid信息，第一帧的block ID从0开始计数，第一帧block ID为0
	input		[SHORT_REG_WD-1 :0]	iv_status					, 	//尾包中的当前帧状态
	input		[REG_WD-1		:0]	iv_valid_payload_size		, 	//尾包中的有效负载大小字段
	input		[SHORT_REG_WD-1 :0]	iv_trailer_size_y			, 	//尾包中的有效高度字段
//  ===============================================================================================
//  第四部分：行、数据有效、数据
//  ===============================================================================================
	output	reg						o_data_valid				,	//添加完头尾的数据有效信号
	output	reg	[DATA_WD-1:0]		ov_data							//
	);

//  ===============================================================================================
//  本地参数
//  ===============================================================================================
	localparam						TRAILER_LENTH	=	4'd9	;	//尾包长度9
//  ===============================================================================================
//  线网和寄存器定义
//  ===============================================================================================
	reg			[3				:0]	count          = 	4'h0	;	//计数器，用来添加尾包中的信号
	reg								chunk_mode_active_r			;	//
	reg								chunkid_en_ts_r	            ;	//
	reg								chunkid_en_fid_r            ;	//
	reg			[7				:0]	chunk_layout_id	=	8'h0 	;
//  ===============================================================================================
//  chunk_layoutid变化
//  ===============================================================================================
	always @ (posedge clk)
		begin
			chunk_mode_active_r	<=   i_chunk_mode_active	;
			chunkid_en_ts_r	    <=   i_chunkid_en_ts		;
			chunkid_en_fid_r    <=   i_chunkid_en_fid	    ;
		end

	always @ (posedge clk)
		begin
			if ( (chunk_mode_active_r ^ i_chunk_mode_active) || (chunkid_en_ts_r ^ i_chunkid_en_ts) || (chunkid_en_fid_r ^ i_chunkid_en_fid))
				chunk_layout_id	<= chunk_layout_id +1;
		end
//  ===============================================================================================
//  i_trailer_flag内计数
//  ===============================================================================================
	always @ (posedge clk) begin
		if(i_trailer_flag) begin
			count	<=	count + 4'h1;
		end
		else begin
			count	<=	4'h0;
		end
	end
//  -------------------------------------------------------------------------------------
//  构造trailer包内容，包格式符合Image Extended Chunk Trailer格式
//  -------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if ( reset ) begin
			ov_data <= 	32'h0;
		end
		else begin
			case ( count )
				4'h1	:	ov_data	<=	32'h54563355				;
				4'h2	:   ov_data	<=	{13'h4,i_chunk_mode_active,2'b00,16'd0}	;	//利用使能位做了一个拼接，当i_chunk_mode_active使能，长度为36，否则为32
				4'h3	:   ov_data	<=	iv_blockid[31:0]          	;
				4'h4	:   ov_data	<=	iv_blockid[63:32]         	;
				4'h5	:   ov_data	<=	{16'h00,iv_status}			;				//这里只支持Image（0x0001）和Image Extended Chunk（0x4001）
				4'h6	:   ov_data	<=	iv_valid_payload_size[31:0]	;
				4'h7	:   ov_data	<=	32'h0						;
				4'h8	:   ov_data	<=	{16'h00,iv_trailer_size_y}	;
				4'h9	:   ov_data	<=	{24'h0,chunk_layout_id}		;				//chunk_layout_id为0
				default	:  	ov_data <= 	32'h0						;
			endcase
		end
	end
//  -------------------------------------------------------------------------------------
//  输出o_data_valid信号,i_chunk_mode_active有效时9个时钟宽度，无效时8个时钟宽度
//  -------------------------------------------------------------------------------------
	always @ (posedge clk) begin
		if ( reset ) begin
			o_data_valid	<=	1'b0;
		end
		else if ( count == 4'h1 )begin
			o_data_valid	<=	1'b1;
		end
		else if ( (count == TRAILER_LENTH) && (~i_chunk_mode_active)  ) begin
			o_data_valid	<=	1'b0;
		end
		else if ( (count == TRAILER_LENTH+1) && i_chunk_mode_active  ) begin
			o_data_valid	<=	1'b0;
		end
	end

endmodule