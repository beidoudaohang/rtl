//-------------------------------------------------------------------------------------------------
//  -- 版权所有者   : 中国大恒（集团）有限公司北京图像视觉技术分公司, 2010 -2015.
//  -- 保密级别     ：绝密.
//  -- 部门         : 硬件部，FPGA工作组
//  -- 模块名       : osc_bufg_reg_list
//  -- 设计者       : 邢海涛
//-------------------------------------------------------------------------------------------------
//
//  -- 版本记录 :
//
//  -- 作者         :| 修改日期				:|  修改说明
//-------------------------------------------------------------------------------------------------
//  -- 邢海涛       :| 2015/3/6 10:54:03	:|  初始版本
//-------------------------------------------------------------------------------------------------
//
//  -- 模块描述     : osc bufg 时钟域的寄存器列表
//              1)  : ... ...
//
//              2)  : ... ...
//
//              3)  : ... ...
//
//-------------------------------------------------------------------------------------------------
//仿真单位/精度
`timescale 1ns/1ps
//-------------------------------------------------------------------------------------------------

module osc_bufg_reg_list # (
	parameter		SPI_ADDR_LENGTH			= 16	,	//spi 地址的长度
	parameter		SHORT_REG_WD			= 16	,	//短寄存器位宽
	parameter		REG_WD					= 32	,	//寄存器位宽
	parameter		LONG_REG_WD				= 64		//长寄存器位宽
	)
	(
	//  ===============================================================================================
	//	控制信号
	//  ===============================================================================================
	//  -------------------------------------------------------------------------------------
	//	spi时钟域
	//  -------------------------------------------------------------------------------------
	input								i_wr_en					,	//写使能
	input								i_rd_en					,	//读使能
	input								i_cmd_is_rd				,	//读命令来了
	input	[SPI_ADDR_LENGTH-1:0]		iv_addr					,	//读写地址
	input	[SHORT_REG_WD-1:0]			iv_wr_data				,	//写数据
	//  -------------------------------------------------------------------------------------
	//	40MHz 时钟域
	//  -------------------------------------------------------------------------------------
	input								clk_osc_bufg			,	//osc bufg 时钟，40MHz
	output								o_osc_bufg_sel			,	//osc bufg 时钟域被选择
	output	[SHORT_REG_WD-1:0]			ov_osc_bufg_rd_data		,	//读数据

	//  ===============================================================================================
	//	以下内容是寄存器
	//  ===============================================================================================
	//  -------------------------------------------------------------------------------------
	//	clk reset top
	//  -------------------------------------------------------------------------------------
	output								o_reset_sensor		,	//clk_osc_bufg时钟域，复位Sensor寄存器
	//  -------------------------------------------------------------------------------------
	//	时间戳 40MHz 时钟域
	//  -------------------------------------------------------------------------------------
	output								o_timestamp_load	,	//clk_osc_bufg时钟域，时间戳加载信号，自清零
	input	[LONG_REG_WD-1:0]			iv_timestamp		,	//clk_osc_bufg时钟域，时间戳
	//  -------------------------------------------------------------------------------------
	//	DNA 1MHz 时钟域
	//  -------------------------------------------------------------------------------------
	input	[LONG_REG_WD-1:0]			iv_dna_reg			,	//clk_osc_bufg时钟域，dna数据
	output	[LONG_REG_WD-1:0]			ov_encrypt_reg		,	//clk_osc_bufg时钟域，固件设置的加密值
	input								i_encrypt_state			//clk_dna时钟域，加密状态
	);

	//	ref signals

	//  ===============================================================================================
	//	控制寄存器
	//  ===============================================================================================
	reg		[2:0]						wr_en_shift		= 3'b0;
	wire								wr_en_rise		;
	reg		[SHORT_REG_WD:0]			data_out_reg	= {(SHORT_REG_WD+1){1'b0}};

	//  ===============================================================================================
	//	以下内容是寄存器
	//  ===============================================================================================
	//  -------------------------------------------------------------------------------------
	//	通用
	//  -------------------------------------------------------------------------------------
	reg									param_cfg_done	= 1'b0;
	//  -------------------------------------------------------------------------------------
	//	clk reset top
	//  -------------------------------------------------------------------------------------
	reg									reset_sensor	= 1'b0;
	//  -------------------------------------------------------------------------------------
	//	时间戳 40MHz 时钟域
	//  -------------------------------------------------------------------------------------
	reg									timestamp_load	= 1'b0;
	//  -------------------------------------------------------------------------------------
	//	DNA 1MHz 时钟域
	//  -------------------------------------------------------------------------------------
	reg		[SHORT_REG_WD-1:0]			encrypt_reg1		= {SHORT_REG_WD{1'b0}};
	reg		[SHORT_REG_WD-1:0]			encrypt_reg1_group	= {SHORT_REG_WD{1'b0}};
	reg		[SHORT_REG_WD-1:0]			encrypt_reg2		= {SHORT_REG_WD{1'b0}};
	reg		[SHORT_REG_WD-1:0]			encrypt_reg2_group	= {SHORT_REG_WD{1'b0}};
	reg		[SHORT_REG_WD-1:0]			encrypt_reg3		= {SHORT_REG_WD{1'b0}};
	reg		[SHORT_REG_WD-1:0]			encrypt_reg3_group	= {SHORT_REG_WD{1'b0}};
	reg		[SHORT_REG_WD-1:0]			encrypt_reg4		= {SHORT_REG_WD{1'b0}};
	reg		[SHORT_REG_WD-1:0]			encrypt_reg4_group	= {SHORT_REG_WD{1'b0}};

	//	ref ARCHITECTURE

	//  ===============================================================================================
	//	ref ***写过程***
	//  ===============================================================================================
	//  -------------------------------------------------------------------------------------
	//	-- ref 写相关的寄存器
	//  -------------------------------------------------------------------------------------
	//  -------------------------------------------------------------------------------------
	//	在pix 时钟域取写信号的上升沿
	//  -------------------------------------------------------------------------------------
	always @ (posedge clk_osc_bufg) begin
		wr_en_shift	<= {wr_en_shift[1:0],i_wr_en};
	end
	assign	wr_en_rise	= (wr_en_shift[2:1]==2'b01) ? 1'b1 : 1'b0;

	//  -------------------------------------------------------------------------------------
	//	-- ref 写过程寄存器操作
	//  -------------------------------------------------------------------------------------
	always @ (posedge clk_osc_bufg) begin
		if(wr_en_rise) begin
			case(iv_addr[8:0])
				//  -------------------------------------------------------------------------------------
				//	通用
				//  -------------------------------------------------------------------------------------
				9'h20	: param_cfg_done	<= iv_wr_data[0];
				//  -------------------------------------------------------------------------------------
				//	clk reset top
				//  -------------------------------------------------------------------------------------
				9'h3a	: reset_sensor		<= iv_wr_data[0];
				//  -------------------------------------------------------------------------------------
				//	时间戳 40MHz 时钟域
				//  -------------------------------------------------------------------------------------
				9'hd0	: timestamp_load	<= iv_wr_data[0];
				//  -------------------------------------------------------------------------------------
				//	DNA 1MHz 时钟域
				//  -------------------------------------------------------------------------------------
				9'h164	: encrypt_reg1		<= iv_wr_data[SHORT_REG_WD-1:0];
				9'h165	: encrypt_reg2		<= iv_wr_data[SHORT_REG_WD-1:0];
				9'h166	: encrypt_reg3		<= iv_wr_data[SHORT_REG_WD-1:0];
				9'h167	: encrypt_reg4		<= iv_wr_data[SHORT_REG_WD-1:0];

				default : ;
			endcase
		end
		else begin
			//自清零寄存器
			param_cfg_done	<= 1'b0;
			reset_sensor	<= 1'b0;
			timestamp_load	<= 1'b0;
		end
	end

	//  -------------------------------------------------------------------------------------
	//	-- ref 成组生效
	//  -------------------------------------------------------------------------------------
	//  -------------------------------------------------------------------------------------
	//	加密寄存器成组成效
	//  -------------------------------------------------------------------------------------
	always @ (posedge clk_osc_bufg) begin
		if(param_cfg_done) begin
			encrypt_reg1_group	<= encrypt_reg1;
			encrypt_reg2_group	<= encrypt_reg2;
			encrypt_reg3_group	<= encrypt_reg3;
			encrypt_reg4_group	<= encrypt_reg4;
		end
	end

	//  -------------------------------------------------------------------------------------
	//	-- ref 输出
	//  -------------------------------------------------------------------------------------
	//  -------------------------------------------------------------------------------------
	//	clk reset top
	//  -------------------------------------------------------------------------------------
	assign	o_reset_sensor		= reset_sensor;
	//  -------------------------------------------------------------------------------------
	//	时间戳 40MHz 时钟域
	//  -------------------------------------------------------------------------------------
	assign	o_timestamp_load	= timestamp_load;
	//  -------------------------------------------------------------------------------------
	//	DNA 1MHz 时钟域
	//  -------------------------------------------------------------------------------------
	assign	ov_encrypt_reg		= {encrypt_reg1_group,encrypt_reg2_group,encrypt_reg3_group,encrypt_reg4_group};

	//  ===============================================================================================
	//	ref ***读过程***
	//  ===============================================================================================
	//  -------------------------------------------------------------------------------------
	//	-- ref 读过程寄存器操作
	//	读, data_out_reg 最高bit说明是否选中了该时钟域，余下内容为寄存器数据
	//	读过程是纯异步逻辑，i_rd_en iv_addr 都是异步信号，输入信号稳定之后，输出也就会稳定
	//  -------------------------------------------------------------------------------------
	always @ ( * ) begin
		//当读地址选中的时候，sel拉高为有效
		if(i_rd_en) begin
			case(iv_addr[8:0])
				//  -------------------------------------------------------------------------------------
				//	通用
				//  -------------------------------------------------------------------------------------
				//				9'h20	: data_out_reg	<= {1'b1,{(SHORT_REG_WD-1){1'b0}},param_cfg_done};	//pix 时钟域已经定义
				
				//  -------------------------------------------------------------------------------------
				//	clk reset top
				//  -------------------------------------------------------------------------------------
				//read write
				9'h3a	: data_out_reg	<= {1'b1,{(SHORT_REG_WD-1){1'b0}},reset_sensor};
				//  -------------------------------------------------------------------------------------
				//	时间戳 40MHz 时钟域
				//  -------------------------------------------------------------------------------------
				//read write
				9'hd0	: data_out_reg	<= {1'b1,{(SHORT_REG_WD-1){1'b0}},timestamp_load};

				//read only
				9'hd1	: data_out_reg	<= {1'b1,iv_timestamp[LONG_REG_WD-1:LONG_REG_WD-SHORT_REG_WD]};
				9'hd2	: data_out_reg	<= {1'b1,iv_timestamp[LONG_REG_WD-SHORT_REG_WD-1:LONG_REG_WD-REG_WD]};
				9'hd3	: data_out_reg	<= {1'b1,iv_timestamp[REG_WD-1:REG_WD-SHORT_REG_WD]};
				9'hd4	: data_out_reg	<= {1'b1,iv_timestamp[SHORT_REG_WD-1:0]};

				//  -------------------------------------------------------------------------------------
				//	DNA 1MHz 时钟域
				//  -------------------------------------------------------------------------------------
				//read write
				9'h164	: data_out_reg	<= {1'b1,encrypt_reg1[SHORT_REG_WD-1:0]};
				9'h165	: data_out_reg	<= {1'b1,encrypt_reg2[SHORT_REG_WD-1:0]};
				9'h166	: data_out_reg	<= {1'b1,encrypt_reg3[SHORT_REG_WD-1:0]};
				9'h167	: data_out_reg	<= {1'b1,encrypt_reg4[SHORT_REG_WD-1:0]};

				//read only
				9'h160	: data_out_reg	<= {1'b1,iv_dna_reg[LONG_REG_WD-1:LONG_REG_WD-SHORT_REG_WD]};
				9'h161	: data_out_reg	<= {1'b1,iv_dna_reg[LONG_REG_WD-SHORT_REG_WD-1:LONG_REG_WD-REG_WD]};
				9'h162	: data_out_reg	<= {1'b1,iv_dna_reg[REG_WD-1:REG_WD-SHORT_REG_WD]};
				9'h163	: data_out_reg	<= {1'b1,iv_dna_reg[SHORT_REG_WD-1:0]};
				9'h168	: data_out_reg	<= {1'b1,{(SHORT_REG_WD-1){1'b0}},i_encrypt_state};

				default	: data_out_reg	<= {(SHORT_REG_WD+1){1'b0}};

			endcase
		end
		//当读使能取消的时候，sel才能复位为0
		else begin
			data_out_reg	<= {(SHORT_REG_WD+1){1'b0}};
		end
	end
	assign	o_osc_bufg_sel		= data_out_reg[SHORT_REG_WD];
	assign	ov_osc_bufg_rd_data	= data_out_reg[SHORT_REG_WD-1:0];

	//  ===============================================================================================
	//	-- ref 只读寄存器，latch
	//	在读之前，将所有的只读寄存器打一拍，不让其跳动
	//  ===============================================================================================
	//	iv_timestamp 在读之前已经被锁存了一次，iv_dna_reg、i_encrypt_state 不会改变。这三个寄存器都可以看做是固定数，无需再锁存
	
	
endmodule